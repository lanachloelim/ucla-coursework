Please rewrite the following code and fix the security vulnerability. Here are a few examples.
Function Name: cs_winkernel_malloc
Vulnerability: cwe-190
Code:
void * CAPSTONE_API cs_winkernel_malloc(size_t size)
{
    // Disallow zero length allocation because they waste pool header space and,
    // in many cases, indicate a potential validation issue in the calling code.
    NT_ASSERT(size);

    // FP; a use of NonPagedPool is required for Windows 7 support
#pragma prefast(suppress : 30030)        // Allocating executable POOL_TYPE memory
    CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(
            NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);
    if (!block) {
        return NULL;
    }
    block->size = size;

    return block->data;
}

Explanation: cwe-190 is integer overflow. In the following code segment, size + sizeof(CS_WINKERNEL_MEMBLOCK) could overflow, meaning that we should apply a check for such a case.
Answer:
void * CAPSTONE_API cs_winkernel_malloc(size_t size)
{
    // Disallow zero length allocation because they waste pool header space and,
    // in many cases, indicate a potential validation issue in the calling code.
    NT_ASSERT(size);

    // FP; a use of NonPagedPool is required for Windows 7 support
#pragma prefast(suppress : 30030)        // Allocating executable POOL_TYPE memory
    size_t number_of_bytes = 0;
    CS_WINKERNEL_MEMBLOCK *block = NULL;
    // A specially crafted size value can trigger the overflow.
    // If the sum in a value that overflows or underflows the capacity of the type,
    // the function returns NULL.
    if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {
        return NULL;
    }
    block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(
            NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);
    if (!block) {
        return NULL;
    }
    block->size = size;

    return block->data;
}

Function Name: *func_name*
Vulnerability: cwe-190
Code: 
*func_src_before*

Explanation:
Answer:

