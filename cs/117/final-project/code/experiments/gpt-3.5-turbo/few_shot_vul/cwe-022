["def getKey(client):\n    \"\"\"Retrieves the specified key for the specified client\n    Returns an error if the key doesn't exist, obviously.\n    \"\"\"\n    global SERVER_JWT_PRIVATE_KEY\n    global BAD_REQUEST\n\n    validateClient(client)\n\n    client_pub_key = loadClientRSAKey(client)\n    token_data = decodeRequestToken(request.data, client_pub_key)\n\n    # Keys may only have alpha-numeric names\n    if not token_data['key'].isalnum():\n        raise FoxlockError(BAD_REQUEST, 'Invalid key requested')\n    try:\n        requested_key = open('keys/%s/%s.key' % (client, token_data['key']), 'r').read()\n    except KeyError:\n        raise FoxlockError(BAD_REQUEST, \"JWT did not contain attribute 'key'\")\n    except IOError:\n        raise FoxlockError(BAD_REQUEST, \"Key '%s' not found\" % token_data['key'])\n\n    # Key is returned in a JWT encrypted with the client's public key, so only they can decrypt it\n    keytoken = packJWT({'key': requested_key}, SERVER_JWT_PRIVATE_KEY, client_pub_key)\n\n    return keytoken"]