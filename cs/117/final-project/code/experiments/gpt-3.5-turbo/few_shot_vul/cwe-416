["static bool __oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)\n{\n    struct mmu_gather tlb;\n    struct vm_area_struct *vma;\n    bool ret = true;\n\n    mutex_lock(&oom_lock);\n\n    if (!down_read_trylock(&mm->mmap_sem)) {\n        ret = false;\n        trace_skip_task_reaping(tsk->pid);\n        goto unlock_oom;\n    }\n\n    if (mm_has_notifiers(mm)) {\n        up_read(&mm->mmap_sem);\n        schedule_timeout_idle(HZ);\n        goto unlock_oom;\n    }\n\n    if (test_bit(MMF_OOM_SKIP, &mm->flags)) {\n        up_read(&mm->mmap_sem);\n        trace_skip_task_reaping(tsk->pid);\n        goto unlock_oom;\n    }\n\n    trace_start_task_reaping(tsk->pid);\n\n    set_bit(MMF_UNSTABLE, &mm->flags);\n\n    tlb_gather_mmu(&tlb, mm, 0, -1);\n    for (vma = mm->mmap; vma; vma = vma->vm_next) {\n        if (!can_madv_dontneed_vma(vma))\n            continue;\n\n        if (vma_is_anonymous(vma) || !(vma->vm_flags & VM_SHARED))\n            unmap_page_range(&tlb, vma, vma->vm_start, vma->vm_end, NULL);\n    }\n    tlb_finish_mmu(&tlb, 0, -1);\n    pr_info(\"oom_reaper: reaped process %d (%s), now anon-rss:%lukB, file-rss:%lukB, shmem-rss:%lukB\\n\",\n            task_pid_nr(tsk), tsk->comm,\n            K(get_mm_counter(mm, MM_ANONPAGES)),\n            K(get_mm_counter(mm, MM_FILEPAGES)),\n            K(get_mm_counter(mm, MM_SHMEMPAGES)));\n    up_read(&mm->mmap_sem);\n\n    trace_finish_task_reaping(tsk->pid);\nunlock_oom:\n    mutex_unlock(&oom_lock);\n    return ret;\n}"]