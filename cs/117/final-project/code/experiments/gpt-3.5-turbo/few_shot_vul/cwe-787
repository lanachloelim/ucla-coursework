["static ssize_t WritePSDChannels(const PSDInfo *psd_info,\n  const ImageInfo *image_info,Image *image,Image *next_image,\n  MagickOffsetType size_offset,const MagickBooleanType separate)\n{\n  Image\n    *mask;\n\n  if (next_image->compression == RLECompression)\n    {\n      unsigned char\n      *compact_pixels = AcquireCompactPixels(image);\n      if (compact_pixels == (unsigned char *) NULL) {\n        return(0);\n      }\n    }\n\n  size_t\n    channels = 1,\n    count = 0,\n    length = 0,\n    offset_length = 0;\n\n  MagickOffsetType\n    rows_offset = 0;\n\n  unsigned char\n    *compact_pixels = (unsigned char *) NULL;\n\n  offset_length = 0;\n  rows_offset = 0;\n  compact_pixels = (unsigned char *) NULL;\n\n  if (next_image->compression == RLECompression)\n    {\n      compact_pixels = AcquireCompactPixels(image);\n      if (compact_pixels == (unsigned char *) NULL)\n        return(0);\n    }\n  \n  if (separate == MagickFalse)\n    {\n      if (next_image->storage_class != PseudoClass)\n        {\n          if (IsGrayImage(next_image,&next_image->exception) == MagickFalse)\n            channels = (next_image->colorspace == CMYKColorspace) ? 4 : 3;\n          if (next_image->matte != MagickFalse)\n            channels++;\n        }\n      rows_offset = TellBlob(image) + 2;\n      count += WriteCompressionStart(psd_info, image, next_image, channels);\n      offset_length = (next_image->rows * (psd_info->version == 1 ? 2 : 4));\n    }\n  \n  size_offset += 2;\n  \n  if (next_image->storage_class == PseudoClass)\n    {\n      length = WritePSDChannel(psd_info, image_info, image, next_image,\n        IndexQuantum, compact_pixels, rows_offset, separate);\n      if (separate != MagickFalse)\n        size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n      else\n        rows_offset += offset_length;\n      count += length;\n    }\n  else\n    {\n      if (IsGrayImage(next_image, &next_image->exception) != MagickFalse)\n        {\n          length = WritePSDChannel(psd_info, image_info, image, next_image,\n            GrayQuantum, compact_pixels, rows_offset, separate);\n          if (separate != MagickFalse)\n            size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n          else\n            rows_offset += offset_length;\n          count += length;\n        }\n      else\n        {\n          if (next_image->colorspace == CMYKColorspace)\n            (void)NegateImage(next_image, MagickFalse);\n\n          length = WritePSDChannel(psd_info, image_info, image, next_image,\n            RedQuantum, compact_pixels, rows_offset, separate);\n          if (separate != MagickFalse)\n            size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n          else\n            rows_offset += offset_length;\n          count += length;\n\n          length = WritePSDChannel(psd_info, image_info, image, next_image,\n            GreenQuantum, compact_pixels, rows_offset, separate);\n          if (separate != MagickFalse)\n            size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n          else\n            rows_offset += offset_length;\n          count += length;\n\n          length = WritePSDChannel(psd_info, image_info, image, next_image,\n            BlueQuantum, compact_pixels, rows_offset, separate);\n          if (separate != MagickFalse)\n            size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n          else\n            rows_offset += offset_length;\n          count += length;\n\n          if (next_image->colorspace == CMYKColorspace)\n            {\n              length = WritePSDChannel(psd_info, image_info, image, next_image,\n                BlackQuantum, compact_pixels, rows_offset, separate);\n              if (separate != MagickFalse)\n                size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n              else\n                rows_offset += offset_length;\n              count += length;\n            }\n        }\n      if (next_image->matte != MagickFalse)\n        {\n          length = WritePSDChannel(psd_info, image_info, image, next_image,\n            AlphaQuantum, compact_pixels, rows_offset, separate);\n          if (separate != MagickFalse)\n            size_offset += WritePSDSize(psd_info, image, length, size_offset) + 2;\n          else\n            rows_offset += offset_length;\n          count += length;\n        }\n    }\n  \n  compact_pixels = (unsigned char *) RelinquishMagickMemory(compact_pixels);\n  \n  if (next_image->colorspace == CMYKColorspace)\n    (void)NegateImage(next_image, MagickFalse);\n\n  if (separate != MagickFalse)\n    {\n      const char\n        *property;\n      \n      property = GetImageArtifact(next_image, \"psd:opacity-mask\");\n      if (property != (const char *) NULL)\n        {\n          mask = (Image *)GetImageRegistry(ImageRegistryType, property, &image->exception);\n          if (mask != (Image *) NULL)\n            {\n              if (mask->compression == RLECompression)\n                {\n                  compact_pixels = AcquireCompactPixels(mask);\n                  if (compact_pixels == (unsigned char *) NULL)\n                    return(0);\n                }\n              length = WritePSDChannel(psd_info, image_info, image, mask,\n                RedQuantum, compact_pixels, rows_offset, MagickTrue);\n              (void)WritePSDSize(psd_info, image, length, size_offset);\n              count += length;\n              compact_pixels = (unsigned char *)RelinquishMagickMemory(compact_pixels);\n            }\n        }\n    }\n  \n  return count;\n}"]